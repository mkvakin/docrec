# cloudbuild.yaml

options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Optional: run tests / lint
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args: ['-c', 'echo "Optional: run tests here"']

  # Ensure remote directory exists and is owned by target user (no REMOTE_DIR variable)
  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -c
      - |
        echo "Ensuring remote dir /home/${_TARGET_USER}/docrec exists on ${_VM_NAME}"
        gcloud compute ssh --zone="${_ZONE}" "${_TARGET_USER}@${_VM_NAME}" --command '
          sudo mkdir -p /home/${_TARGET_USER}/docrec &&
          sudo chown -R ${_TARGET_USER}:${_TARGET_USER} /home/${_TARGET_USER}/docrec
        ' --quiet

  # Copy workspace files to the VM (use /workspace/*)
  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -c
      - |
        echo "Copying source to ${_TARGET_USER}@${_VM_NAME}:/home/${_TARGET_USER}/docrec"
        gcloud compute scp --recurse --zone="${_ZONE}" /workspace/* "${_TARGET_USER}@${_VM_NAME}:/home/${_TARGET_USER}/docrec" --quiet

  # SSH to VM and perform deployment (venv, pip install, move service, reload systemd)
  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -c
      - |
        echo "Deploying on ${_VM_NAME} as ${_TARGET_USER} to /home/${_TARGET_USER}/docrec"
        gcloud compute ssh --zone="${_ZONE}" "${_TARGET_USER}@${_VM_NAME}" --command '
          set -euo pipefail;
          sudo apt-get update -y || true;
          sudo apt-get install -y python3 python3-venv python3-pip || true;
          cd /home/${_TARGET_USER}/docrec;
          python3 -m venv .venv || true;
          . .venv/bin/activate;
          pip install --upgrade pip || true;
          if [ -f /home/${_TARGET_USER}/docrec/server/requirements.txt ]; then
            pip install -r /home/${_TARGET_USER}/docrec/server/requirements.txt || true;
          fi;
          if [ -f /home/${_TARGET_USER}/docrec/server/${_SERVICE_FILE} ]; then
            sed -e "s/USER_PLACEHOLDER/${_TARGET_USER}/g" \
                -e "s|Environment=PORT=8080|Environment=PORT=8080\nEnvironment=GCS_BUCKET=${_GCS_BUCKET}\nEnvironment=GOOGLE_CLOUD_PROJECT=${_PROJECT_ID}|g" \
                /home/${_TARGET_USER}/docrec/server/${_SERVICE_FILE} | sudo tee /etc/systemd/system/${_SERVICE_NAME}.service > /dev/null;
          fi;
          sudo systemctl daemon-reload;
          sudo systemctl enable ${_SERVICE_NAME}.service || true;
          sudo systemctl restart ${_SERVICE_NAME}.service || true;
          sudo systemctl status ${_SERVICE_NAME}.service --no-pager || true
        ' --quiet

substitutions:
  _VM_NAME: "my-vm"
  _TARGET_USER: "appuser"
  _ZONE: "us-central1-a"
  _SERVICE_NAME: "docrec"
  _SERVICE_FILE: "docrec.service"
  _GCS_BUCKET: "my-bucket"        # add real bucket name in trigger or here as default
  _PROJECT_ID: "my-project"
  _PORT: "8080"
  _GUNICORN_WORKERS: "2"
  _WSGI_MODULE: "app:app"

timeout: "1200s"